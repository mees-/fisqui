// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      account[]
    sessions      session[]

    books        book[]
    transactions transaction[]
}

model verificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model book {
    id      String   @id @default(cuid())
    name    String
    user    user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    ledgers ledger[]
}

enum ledgerType {
    BALANCE
    EQUITY
    CHANGE
}

model ledger {
    id          String               @id @default(cuid())
    name        String
    type        ledgerType
    description String?
    bookId      String
    book        book                 @relation(fields: [bookId], references: [id], onDelete: Cascade)
    entries     transactionEntries[]
}

model transaction {
    id          String               @id @default(cuid())
    userId      String
    user        user                 @relation(fields: [userId], references: [id], onDelete: Cascade)
    description String?
    date        DateTime
    entries     transactionEntries[]
}

model transactionEntries {
    id            String      @id @default(cuid())
    transactionId String
    transaction   transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    ledgerId      String
    ledger        ledger      @relation(fields: [ledgerId], references: [id], onDelete: Cascade)
    amount        Int
    description   String?
}
